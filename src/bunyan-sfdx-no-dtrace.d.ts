/** Declaration file generated by dts-gen */

export = bunyan_sfdx_no_dtrace;

declare class bunyan_sfdx_no_dtrace {
    constructor(options: any, _childOptions: any, _childSimple: any);

    addSerializers(serializers: any): void;

    addStream(s: any, defaultLevel: any): void;

    child(options: any, simple: any): any;

    debug(...args: any[]): any;

    error(...args: any[]): any;

    fatal(...args: any[]): any;

    info(...args: any[]): any;

    level(value: any): any;

    levels(name: any, value: any): any;

    reopenFileStreams(): void;

    trace(...args: any[]): any;

    warn(...args: any[]): any;

    static DEBUG: number;

    static ERROR: number;

    static FATAL: number;

    static INFO: number;

    static LOG_VERSION: number;

    static TRACE: number;

    static VERSION: string;

    static WARN: number;

    static createLogger(options: any): any;

    static levelFromName: {
        debug: number;
        error: number;
        fatal: number;
        info: number;
        trace: number;
        warn: number;
    };

    static nameFromLevel: {
        "10": string;
        "20": string;
        "30": string;
        "40": string;
        "50": string;
        "60": string;
    };

    static resolveLevel(nameOrNum: any): any;

    static safeCycles(): any;

}

declare namespace bunyan_sfdx_no_dtrace {
    class RingBuffer {
        constructor(options: any);

        destroy(): void;

        destroySoon(): void;

        end(...args: any[]): void;

        write(record: any): any;

    }

    class RotatingFileStream {
        constructor(options: any);

        destroy(s: any): void;

        destroySoon(s: any): void;

        end(s: any): void;

        rotate(): any;

        write(s: any): any;

    }

    namespace stdSerializers {
        function err(err: any): any;

        function req(req: any): any;

        function res(res: any): any;

    }

}

