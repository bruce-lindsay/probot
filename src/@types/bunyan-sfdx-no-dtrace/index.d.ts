/** Declaration file generated by dts-gen */
/// <reference types="node" />

declare module "bunyan-sfdx-no-dtrace" {

    declare class Logger {
        constructor(options: any, _childOptions?: any, _childSimple?: any);

        addSerializers(serializers: any): void;

        addStream(s: any, defaultLevel?: any): void;

        child(options: any, simple?: any): any;

        debug(...args: any[]): any;

        error(...args: any[]): any;

        fatal(...args: any[]): any;

        info(...args: any[]): any;

        level(value: any): any;

        levels(name: any, value: any): any;

        reopenFileStreams(): void;

        trace(...args: any[]): any;

        warn(...args: any[]): any;

        static DEBUG: number;

        static ERROR: number;

        static FATAL: number;

        static INFO: number;

        static LOG_VERSION: number;

        static TRACE: number;

        static VERSION: string;

        static WARN: number;

        static createLogger(options: any): any;

        static levelFromName: {
            debug: number;
            error: number;
            fatal: number;
            info: number;
            trace: number;
            warn: number;
        };

        static nameFromLevel: {
            "10": string;
            "20": string;
            "30": string;
            "40": string;
            "50": string;
            "60": string;
        };

        static resolveLevel(nameOrNum: any): any;

        static safeCycles(): any;

    }

    declare namespace Logger {
        class RingBuffer {
            constructor(options: any);

            destroy(): void;

            destroySoon(): void;

            end(...args: any[]): void;

            write(record: any): any;

        }

        class RotatingFileStream {
            constructor(options: any);

            destroy(s: any): void;

            destroySoon(s: any): void;

            end(s: any): void;

            rotate(): any;

            write(s: any): any;

        }

        
        type Serializer = (input: any) => any;

        interface Serializers {
            [key: string]: Serializer;
        }

        interface StdSerializers extends Serializers {
            err: Serializer;
            res: Serializer;
            req: Serializer;
        }

        const stdSerializers: StdSerializers;
    }

    export = Logger;
}